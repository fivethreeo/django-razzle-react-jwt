import path from 'path';
import React from 'react';
import express from 'express';
import isEmpty from 'is-empty';
import { renderToString } from 'react-dom/server';
import { ChunkExtractor } from '@loadable/server'
import { Router } from 'react-router-dom';
import Cookies from 'universal-cookie';
import { createMemoryHistory } from 'history';
import queryString from 'query-string';
import { ApolloProvider } from "react-apollo";
import { ApolloProvider as ApolloHooksProvider } from "react-apollo-hooks";
import { ServerContextProvider, ServerContextComponent} from '../utils/ServerContext';
import { QueryParamProvider } from 'use-query-params';
import RequestContext from '../utils/RequestContext';
import CookieContext from '../utils/CookieContext';
import { getApolloClient } from '../utils/apolloUtils';
import ClientConfig from '../config/components/ClientConfig';
import App from '../components/App';

import security from './middleware/security';

const assets = require(process.env.RAZZLE_ASSETS_MANIFEST);

const server = express();

server
  .disable('x-powered-by')
  .use(...security)
  .use(express.static(process.env.RAZZLE_PUBLIC_DIR))
  .use(async (req, res) => {

    req.locals = req.locals || {}; 

    const cookies = new Cookies(req.headers.cookie);

    const history = createMemoryHistory({
      initialEntries: [req.url + (isEmpty(req.query) ? '' : '?' + queryString.stringify(req.query))]
    });

    const client = getApolloClient({ history, cookies });
    
    const serverContext = req.locals.reactServerContext || {};

    // This is the stats file generated by webpack loadable plugin
    const statsFile = path.resolve('./build/loadable-stats.json')
    // We create an extractor from the statsFile
    const extractor = new ChunkExtractor({ statsFile, entrypoints: ['client']})
    // Wrap your application using "collectChunks"
    const jsx = extractor.collectChunks(
      <ServerContextProvider value={serverContext}>
        <RequestContext.Provider value={req}>
          <CookieContext.Provider value={cookies}>
            <ApolloProvider client={client} >
              <ApolloHooksProvider client={client} >
                <QueryParamProvider history={history}>
                  <Router history={history} >
                    <App />
                  </Router>
                </QueryParamProvider>
              </ApolloHooksProvider>
            </ApolloProvider>
          </CookieContext.Provider>
        </RequestContext.Provider>
      </ServerContextProvider>)

    // Render your application
    const markup = renderToString(jsx)
    // You can now collect your script tags
    const scriptElements = extractor.getScriptElements({nonce: res.locals.nonce}) // or extractor.getScriptElements();
    // You can also collect your "preload/prefetch" links
    const linkElements = extractor.getLinkElements({nonce: res.locals.nonce}) // or extractor.getLinkElements();
    // And you can even collect your style tags (if you use "mini-css-extract-plugin")
    const styleElements = extractor.getStyleElements({nonce: res.locals.nonce}) // or extractor.getStyleElements();


    const html = renderToString(<html lang="">
      <head>
          <meta httpEquiv="X-UA-Compatible" content="IE=edge" />
          <meta charSet='utf-8' />
          <title>Welcome to Razzle</title>
          <meta name="viewport" content="width=device-width, initial-scale=1" />
          {linkElements} 
          {styleElements}
      </head>
      <body>
          <div id="root">DO_NOT_DELETE_THIS_YOU_WILL_BREAK_YOUR_APP</div>
          <ClientConfig nonce={res.locals.nonce} />
          <ServerContextComponent nonce={res.locals.nonce} context={serverContext} />
          {scriptElements}
      </body>
    </html>);

    res.send(
      // prettier-ignore
      `<!doctype html>${html.replace('DO_NOT_DELETE_THIS_YOU_WILL_BREAK_YOUR_APP', markup)}`
    );
  });

export default server;
